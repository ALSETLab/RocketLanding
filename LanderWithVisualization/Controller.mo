within RocketLanding.LanderWithVisualization;
model Controller
  Modelica.Blocks.Interfaces.RealInput altitude_z annotation (Placement(
        transformation(extent={{-280,34},{-240,74}}), iconTransformation(
          extent={{-180,-12},{-156,12}})));
  Modelica.Blocks.Interfaces.RealOutput z_throttle
    annotation (Placement(transformation(extent={{100,-70},{120,-50}}),
        iconTransformation(extent={{100,-70},{120,-50}})));
  Modelica.Blocks.Interfaces.RealInput x_tilt annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=90,
        origin={-96,-100}), iconTransformation(
        extent={{-14,-14},{14,14}},
        rotation=90,
        origin={-60,-86})));
  Modelica.Blocks.Interfaces.RealOutput x_throttle
    annotation (Placement(transformation(extent={{100,50},{120,70}}),
        iconTransformation(extent={{100,50},{120,70}})));
  Modelica.Blocks.Interfaces.RealOutput y_throttle
    annotation (Placement(transformation(extent={{100,-10},{120,10}}),
        iconTransformation(extent={{100,-10},{120,10}})));
  Modelica.Blocks.Interfaces.RealInput y_tilt annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=90,
        origin={-52,-100}),
                          iconTransformation(
        extent={{-15,-15},{15,15}},
        rotation=90,
        origin={-1,-85})));
  Modelica.Blocks.Interfaces.RealInput z_tilt annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=90,
        origin={-12,-100}),iconTransformation(
        extent={{-16,-16},{16,16}},
        rotation=90,
        origin={60,-84})));
  Modelica.Blocks.Math.Gain gain1(k=1)
    annotation (Placement(transformation(extent={{36,-72},{48,-60}})));
  Modelica.Blocks.Sources.Constant const(k=0)
    annotation (Placement(transformation(extent={{62,-6},{74,6}})));
  Modelica.Blocks.Math.Product product
    annotation (Placement(transformation(extent={{60,50},{80,70}})));
  Modelica.Blocks.Math.Product product1
    annotation (Placement(transformation(extent={{60,-70},{80,-50}})));
  Modelica.Blocks.Math.Gain gain2(k=1)
    annotation (Placement(transformation(extent={{40,48},{52,60}})));
  Modelica.Blocks.Math.Sin sin1
    annotation (Placement(transformation(extent={{12,44},{32,64}})));
  Modelica.Blocks.Math.Cos cos1
    annotation (Placement(transformation(extent={{10,-76},{30,-56}})));
  Modelica.Blocks.Interfaces.RealOutput gridfin_Y_angle annotation (
      Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-54,150}), iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-60,150})));
  GridFinController gridFinController annotation (Placement(transformation(
          rotation=0, extent={{-74,78},{-34,118}})));
  Modelica.Blocks.Sources.Clock clock
    annotation (Placement(transformation(extent={{-256,-34},{-236,-14}})));
  BoostBackController boostBackController annotation (Placement(
        transformation(rotation=0, extent={{-202,-42},{-158,2}})));
  EntryController entryController annotation (Placement(transformation(
          rotation=0, extent={{-202,-90},{-158,-46}})));
  Modelica.Blocks.Math.Add3 totalThrust
    annotation (Placement(transformation(extent={{-128,-42},{-108,-22}})));
  LandingController landingController annotation (Placement(transformation(
          rotation=0, extent={{-202,10},{-158,54}})));
  Modelica.Blocks.Interfaces.RealOutput gridfin_X_angle
                                                       annotation (
      Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-76,150}), iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-120,150})));
  Modelica.Blocks.Interfaces.RealOutput gridfin_Z_angle
                                                       annotation (
      Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-34,150}), iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={0,150})));
  Modelica.Blocks.Interfaces.RealInput X_Position annotation (Placement(
        transformation(extent={{-280,84},{-240,124}}), iconTransformation(
          extent={{-180,52},{-156,76}})));
  Modelica.Blocks.Interfaces.RealOutput Throttle annotation (Placement(
        transformation(extent={{100,92},{120,112}}), iconTransformation(
          extent={{100,92},{120,112}})));
  Modelica.Blocks.Math.Add Drag_Effects
    annotation (Placement(transformation(extent={{-92,-46},{-74,-28}})));
  Modelica.Blocks.Interfaces.RealInput Drag annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=90,
        origin={-128,-100}), iconTransformation(
        extent={{-14,-14},{14,14}},
        rotation=90,
        origin={-132,-86})));

  sky_visualization sky_visualization1 annotation (Placement(transformation(
          rotation=0, extent={{-198,62},{-178,82}})));
equation
  connect(y_throttle, y_throttle)
    annotation (Line(points={{110,0},{110,0}}, color={0,0,127}));
  connect(const.y, y_throttle)
    annotation (Line(points={{74.6,0},{110,0}}, color={0,0,127}));
  connect(product1.u2, gain1.y)
    annotation (Line(points={{58,-66},{48.6,-66}}, color={0,0,127}));
  connect(gain2.y, product.u2)
    annotation (Line(points={{52.6,54},{58,54}}, color={0,0,127}));
  connect(cos1.y, gain1.u) annotation (Line(points={{31,-66},{34,-66},{34,
          -66},{34.8,-66}}, color={0,0,127}));
  connect(cos1.u, y_tilt)
    annotation (Line(points={{8,-66},{-52,-66},{-52,-100}},
                                                        color={0,0,127}));
  connect(sin1.y, gain2.u)
    annotation (Line(points={{33,54},{38.8,54}}, color={0,0,127}));
  connect(sin1.u, y_tilt)
    annotation (Line(points={{10,54},{-52,54},{-52,-100}},
                                                       color={0,0,127}));
  connect(product.y, x_throttle) annotation (Line(points={{81,60},{90,60},{
          90,60},{110,60}}, color={0,0,127}));
  connect(product1.y, z_throttle)
    annotation (Line(points={{81,-60},{110,-60}}, color={0,0,127}));
  connect(gridFinController.Y_Tilt, y_tilt)
    annotation (Line(points={{-52,80},{-52,-100}}, color={0,0,127}));
  connect(gridFinController.Y_GridFinAngle, gridfin_Y_angle) annotation (
      Line(points={{-53.6,120},{-54,120},{-54,150}}, color={0,0,127}));
  connect(clock.y, boostBackController.Clock) annotation (Line(points={{
          -235,-24},{-226,-24},{-226,-20},{-214,-20},{-214,-25.72},{-202,
          -25.72}}, color={0,0,127}));
  connect(clock.y, entryController.Clock) annotation (Line(points={{-235,-24},
          {-226,-24},{-226,-66.68},{-202,-66.68}}, color={0,0,127}));
  connect(product1.u1, product.u1) annotation (Line(points={{58,-54},{50,
          -54},{50,-32},{-14,-32},{-14,86},{46,86},{46,66},{58,66}}, color=
          {0,0,127}));
  connect(landingController.Clock, boostBackController.Clock) annotation (
      Line(points={{-202,13.96},{-226,13.96},{-226,-20},{-214,-20},{-214,
          -25.72},{-202,-25.72}}, color={0,0,127}));
  connect(entryController.Thrust, totalThrust.u3) annotation (Line(points={
          {-155.8,-68},{-144,-68},{-144,-40},{-130,-40}}, color={0,0,127}));
  connect(boostBackController.Thrust, totalThrust.u2) annotation (Line(
        points={{-155.8,-19.56},{-150,-19.56},{-150,-32},{-130,-32}}, color=
         {0,0,127}));
  connect(landingController.Altitude, altitude_z) annotation (Line(points={{-202,
          27.16},{-202,28},{-236,28},{-236,54},{-260,54}},       color={0,0,
          127}));
  connect(landingController.Thrust, totalThrust.u1) annotation (Line(points=
         {{-155.8,20.56},{-140,20.56},{-140,-24},{-130,-24}}, color={0,0,
          127}));
  connect(x_tilt, gridFinController.X_Tilt) annotation (Line(points={{-96,
          -100},{-96,-70},{-66,-70},{-66,80},{-65.6,80}}, color={0,0,127}));
  connect(z_tilt, gridFinController.Z_Tilt) annotation (Line(points={{-12,
          -100},{-12,-74},{-40.8,-74},{-40.8,80}}, color={0,0,127}));
  connect(gridFinController.X_GridFinAngle, gridfin_X_angle) annotation (
      Line(points={{-67.6,120},{-68,120},{-68,128},{-76,128},{-76,150}},
        color={0,0,127}));
  connect(gridFinController.Z_GridFinAngle, gridfin_Z_angle) annotation (
      Line(points={{-42,120},{-42,126},{-34,126},{-34,150}}, color={0,0,127}));
  connect(gridFinController.Clock, boostBackController.Clock) annotation (
      Line(points={{-72,92.8},{-136,92.8},{-136,92},{-226,92},{-226,-20},{
          -214,-20},{-214,-25.72},{-202,-25.72}}, color={0,0,127}));
  connect(X_Position, gridFinController.X_Position) annotation (Line(points=
         {{-260,104},{-168,104},{-168,103.6},{-72,103.6}}, color={0,0,127}));
  connect(boostBackController.X_Position, X_Position) annotation (Line(
        points={{-202,-11.2},{-212,-11.2},{-212,104},{-260,104}}, color={0,
          0,127}));
  connect(Throttle, Throttle)
    annotation (Line(points={{110,102},{110,102}}, color={0,0,127}));
  connect(Drag_Effects.u1, totalThrust.y) annotation (Line(points={{-93.8,
          -31.6},{-100.8,-31.6},{-100.8,-32},{-107,-32}}, color={0,0,127}));
  connect(Drag_Effects.y, product.u1) annotation (Line(points={{-73.1,-37},
          {-14,-37},{-14,86},{46,86},{46,66},{58,66}}, color={0,0,127}));
  connect(Throttle, totalThrust.y) annotation (Line(points={{110,102},{-26,
          102},{-26,-4},{-102,-4},{-102,-32},{-107,-32}}, color={0,0,127}));
  connect(Drag, Drag_Effects.u2) annotation (Line(points={{-128,-100},{-128,
          -52},{-100,-52},{-100,-42.4},{-93.8,-42.4}}, color={0,0,127}));
  connect(sky_visualization1.u, altitude_z) annotation (Line(points={{-198,
          76},{-236,76},{-236,54},{-260,54}}, color={0,0,127}));
  annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-260,
            -100},{100,140}}),                                  graphics={
          Bitmap(extent={{-144,-88},{82,126}},
          imageSource=
              ""
               +
              "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",

          fileName=
              "modelica://RocketLanding/Resources/Images/primary_flight_control.jpg"),
          Rectangle(extent={{-180,140},{100,-100}}, lineColor={0,0,0}),
        Text(
          extent={{-162,130},{68,88}},
          lineColor={0,0,0},
          textString="%name")}),                                 Diagram(
        coordinateSystem(preserveAspectRatio=false, extent={{-260,-100},{
            100,140}})));
end Controller;
